#!/usr/bin/env node

const buildOptions = require("minimist-options");
const JSON5 = require("json5");
const minimist = require("minimist");
const Testrail = require("testrail-api");
const testrail_lib = require("../libs/testrail_mainLib");
const testrail_dashboard = require("../libs/testrail_dashboard");
const jsonfile = require("jsonfile");

const options = buildOptions({
    // Authentication parameters
    apiUrl: {
        type: "string",
        default: process.env.trApiUrl,
    },
    apiUser: {
        type: "string",
        default: process.env.trApiUser,
    },
    apiPassword: {
        type: "string",
        default: process.env.trApiKey,
    },
    // Cucumber Parameters
    cbJsonPath: {
        type: "string", //,
    },
    // API parameters
    trCaseId: {
        type: "number",
    },
    trTestId: {
        type: "number",
    },
    trCmd: {
        type: "string",
        default: "getProjects",
    },
    trFilter: {
        type: "string",
        default: "",
    },
    trMilestoneId: {
        type: "number",
    },
    trProjectId: {
        type: "number",
        default: 47, 
    },
    trProjectIds: {
        type: "string",
        default: "",
    },
    trRunId: {
        type: "number",
    },
    trSectionId: {
        type: "number",
    },
    trSuiteId: {
        type: "number",
    },
    trSuiteName: {
        type: "string",
    },
    trUserEmail: {
        type: "string",
    },
    trUserId: {
        type: "number",
    },
    trForceAdd: {
        type: "boolean",
        default: true,
    },
    trForceUpdate: {
        type: "boolean",
        default: true,
    },
    trSprintId: {
        type: "number",
        default: 0, //0 - autogenerated
    },
    trTestTarget: {
        type: "string",
        default: "QA",
    },
    trTestrunId: {
        type: "number",
    },
    trJenkinsPath: {
        type: "string",
    },
    trUpdateInBulk: {
        type: "boolean",
        default: true,
    },
    trModuleName: {
        type: "string",
        default: "auto",
    },
    trTestId: {
        type: "number",
    },

    // Special option for positional arguments (`_` in minimist)
    arguments: "string",
});

const args = minimist(process.argv.slice(2), options);
const trFilter = JSON5.parse("{" + args.trFilter + "}");

var testrail = new Testrail({
    host: args.apiUrl,
    user: args.apiUser,
    password: args.apiPassword,
});

switch (args.trCmd) {
    //initial checking to verify between feature file and testrail cases.
    case "cbPretestVerification":
        if (!args.cbJsonPath) {
            console.log("cbJsonPath is required");
            break;
        }

        const cbJsonPretestVer = jsonfile.readFileSync(args.cbJsonPath);
        var testrail_data = [];
        var testrail_ids = [];
        testrail.getCases(args.trProjectId).then((response) => {
            response.body.forEach((testcase) => {
                testrail_data.push({ id: testcase.id, name: testcase.title, auto: testcase.custom_automation });
                testrail_ids.push(testcase.id);
            });
            console.log("Total IDs found in testrail = " + testrail_ids.length);
            testrail_lib.getPretestVerification(testrail_data, testrail_ids, cbJsonPretestVer);
        });
        break;
        case "cbPretestVerification_NW":
            if (!args.cbJsonPath) {
                console.log("cbJsonPath is required");
                break;
            }
    
            const cbJsonPretestVer_NW = jsonfile.readFileSync(args.cbJsonPath);
            var testrail_data = [];
            var testrail_ids = [];
            testrail.getCases(args.trProjectId).then((response) => {
                response.body.forEach((testcase) => {
                    testrail_data.push({ id: testcase.id, name: testcase.title, auto: testcase.custom_automation });
                    testrail_ids.push(testcase.id);
                });
                console.log("Total IDs found in testrail = " + testrail_ids.length);
                testrail_lib.getPretestVerification_NW(testrail_data, testrail_ids, cbJsonPretestVer_NW);
            });
            break;
    //Update Test Cases to TestRail
    case "cbTestCases":
        const cbJsonTC = jsonfile.readFileSync(args.cbJsonPath);
        var testrail_ids = [];
        testrail.getCases(args.trProjectId).then((response) => {
            response.body.forEach((testcase) => {
                testrail_ids.push(testcase.id);
            });
            console.log("Total IDs found in testrail = " + testrail_ids.length);
            cbJsonTC.forEach((feature) =>
                (async () => {
                    for (var index = 0; index < feature.elements.length; index++) {
                        scenario = feature.elements[index];
                        await testrail_lib.getCaseId_byScenario(testrail_ids, feature, scenario, args.trForceUpdate);
                    }
                })()
            );
        });


        break;

    case "cbTestResults_NW":
        if (!args.trProjectId) {
            console.log("trProjectId is required");
            break;
        }
        if (!args.cbJsonPath) {
            console.log("cbJsonPath is required");
            break;
        }
        const resultJson = jsonfile.readFileSync(args.cbJsonPath);

        //console.log ( ">>> " + resultJson );
        testrail_lib
            .getSuiteName_byFeature(resultJson, args.trModuleName)
            .then((mySuiteName) => {
                testrail_lib
                    .getMilestones_byProjectId(args.trProjectId, args.trSprintId, args.trForceAdd)
                    .then((milestoneId) => {
                        var testrail_ids = [];
                        testrail.getCases(args.trProjectId).then((response) => {
                            response.body.forEach((testcase) => {
                                testrail_ids.push(testcase.id);
                            });
                            console.log("Total IDs found in testrail = " + testrail_ids.length);

                            testrail_lib
                                .getCaseDicts_byFeature_NW(testrail_ids, resultJson)
                                .then((caseDicts) => {
                                    testrail_lib
                                        .getTestRuns_byMilestoneId(args.trProjectId, milestoneId, args.trSprintId, mySuiteName, caseDicts, args.trJenkinsPath, args.trForceAdd, args.trForceUpdate)
                                        .then((testRunId) => {
                                            console.log("> Test Run ID : " + testRunId);
                                            //if (args.trUpdateInBulk) {
                                            //  testrail_lib.addTestResultInBulk(testRunId, cbJsonTR, caseDicts, args.trTestTarget, args.trJenkinsPath);
                                            //} else {
                                            testrail_lib.addTestResultIndividually_NW(testRunId, resultJson, caseDicts, args.trTestTarget, args.trJenkinsPath);
                                            //}
                                        })
                                        .catch((testrunError) => {
                                            console.error(testrunError);
                                        });
                                })
                                .catch((caseDictError) => {
                                    console.error(caseDictError);
                                });
                        });
                    })
                    .catch((milestoneError) => {
                        console.error(milestoneError);
                    });
            })
            .catch((suiteNameError) => {
                console.error(suiteNameError);
            });

        break;
    //Add result to TestRail
    case "cbTestResults":
        /*Input: 
        [Required: trProjectId, cbJsonPath]
        [Optional: trSprintId (auto), trForceAdd(false), trForceUpdate(false), trTestTarget(QA), trJenkinsPath, trModuleName]*/
        if (!args.trProjectId) {
            console.log("trProjectId is required");
            break;
        }
        if (!args.cbJsonPath) {
            console.log("cbJsonPath is required");
            break;
        }
        const cbJsonTR = jsonfile.readFileSync(args.cbJsonPath);
        testrail_lib
            .getSuiteName_byFeature(cbJsonTR, args.trModuleName)
            .then((mySuiteName) => {
                //  testrail_lib.getPretestStatus(cbJsonTestrun)
                //  .then( pretestResult => {
                testrail_lib
                    .getMilestones_byProjectId(args.trProjectId, args.trSprintId, args.trForceAdd)
                    .then((milestoneId) => {
                        var testrail_ids = [];
                        testrail.getCases(args.trProjectId).then((response) => {
                            response.body.forEach((testcase) => {
                                testrail_ids.push(testcase.id);
                            });
                            console.log("Total IDs found in testrail = " + testrail_ids.length);

                            testrail_lib
                                .getCaseDicts_byFeature(testrail_ids, cbJsonTR)
                                .then((caseDicts) => {
                                    // caseDicts.forEach(acase => {
                                    //     console.log ( acase)
                                    // })
                                    testrail_lib
                                        .getTestRuns_byMilestoneId(args.trProjectId, milestoneId, args.trSprintId, mySuiteName, caseDicts, args.trJenkinsPath, args.trForceAdd, args.trForceUpdate)
                                        .then((testRunId) => {
                                            console.log("> Test Run ID : " + testRunId);
                                            if (args.trUpdateInBulk) {
                                                testrail_lib.addTestResultInBulk(testRunId, cbJsonTR, caseDicts, args.trTestTarget, args.trJenkinsPath);
                                            } else {
                                                testrail_lib.addTestResultIndividually(testRunId, cbJsonTR, caseDicts, args.trTestTarget, args.trJenkinsPath);
                                            }
                                        })
                                        .catch((testrunError) => {
                                            console.error(testrunError);
                                        });
                                })
                                .catch((caseDictError) => {
                                    console.error(caseDictError);
                                });
                        });
                    })
                    .catch((milestoneError) => {
                        console.error(milestoneError);
                    });
                //  }).catch ( preTestError  => {
                //      console.error ( preTestError );
                //  });
            })
            .catch((suiteNameError) => {
                console.error(suiteNameError);
            });
        break;

    //function to generate automationstatus.json file for dashboard update purpose
    case "cbTestStatus":
        var projectids = [];
        if (args.trProjectIds != "") {
            projectids = args.trProjectIds.split(",");
        }
        console.log(projectids);

        if (args.cbJsonPath) {
            testrail_dashboard.getDashboardStatus(projectids, args.cbJsonPath);
        } else {
            console.log(" > NEW JSON FILE");
            testrail_dashboard.getDashboardStatus(projectids, "");
        }
        break;

    //function to generate healthstatus.json file for dashboard update purpose
    case "cbHealthStatus":
        var projectids = [];
        if (args.projectids != "") {
            projectids = args.trProjectIds.split(",");
        }
        console.log(projectids);

        if (args.cbJsonPath) {
            testrail_lib.getHealthStatus(projectids, args.cbJsonPath);
        } else {
            console.log(" > NEW JSON FILE");
            testrail_lib.getHealthStatus(projectids, "");
        }
        break;

    case "getCase":
    case "getCaseById":
        console.log("get case");
        testrail.getCase(/*CASE_ID=*/ args.trCaseId, function (err, response, testcase) {
            console.log(testcase);
        });
        break;
    case "getCases":
        testrail.getCases(/*PROJECT_ID=*/ args.trProjectId, /*FILTERS=*/ trFilter, function (err, response, cases) {
            console.log(cases);
        });
        break;
    case "getProjects":
        testrail.getProjects(/*FILTERS=*/ trFilter, function (err, response, projects) {
            console.log(projects);
        });
        break;
    case "getProject":
        testrail.getProject(/*PROJECT_ID=*/ args.trProjectId, function (err, response, project) {
            console.log(project);
        });
        break;
    case "getMilestones":
        testrail.getMilestones(/*PROJECT_ID=*/ args.trProjectId, /*FILTERS=*/ trFilter, function (err, response, milestones) {
            console.log(milestones);
        });
        break;
    case "getMilestone":
        testrail.getMilestone(/*MILESTONE_ID=*/ args.trMilestoneId, function (err, response, milestone) {
            console.log(milestone);
        });
        break;
    case "deleteMilestone":
        testrail.deleteMilestone(/*MILESTONE_ID=*/ args.trMilestoneId, function (err, response, body) {
            console.log(body);
        });
        break;
    case "getRuns":
        testrail.getRuns(/*PROJECT_ID=*/ args.trProjectId, /*FILTERS=*/ trFilter, function (err, response, runs) {
            console.log(runs);
        });
        break;
    case "getRun":
        testrail.getRun(/*RUN_ID=*/ args.trRunId, function (err, response, run) {
            console.log(run);
        });
        break;
    case "getResultsForRun":
        testrail.getResultsForRun(/*RUN_ID=*/ args.trRunId, /*FILTERS=*/ trFilter, function (err, response, results) {
            console.log(results);
        });
        break;
    case "getResultsForCase":
        testrail.getResultsForCase(/*RUN_ID=*/ args.trRunId, /*CASE_ID=*/ args.trCaseId, /*FILTERS=*/ trFilter, function (err, response, results) {
            console.log(results);
        });
        break;
    case "getResults_ByTestId":
        testrail.getResults(/*TEST_ID=*/ args.trTestId, /*FILTERS=*/ args.trFilter, function (err, response, results) {
            console.log(results);
        });
        break;
    case "getSections":
    case "getFeatures":
        testrail.getSections(/*PROJECT_ID=*/ args.trProjectId, /*FILTERS=*/ {}, function (err, response, sections) {
            console.log(sections);
        });
        break;
    case "getSection":
    case "getFeature":
        testrail.getSection(/*SECTION_ID=*/ args.trSectionId, function (err, response, section) {
            console.log(section);
        });
        break;
    case "getSuites":
    case "getModules":
        testrail.getSuites(/*PROJECT_ID=*/ args.trProjectId, function (err, response, suites) {
            console.log(suites);
        });
        break;
    case "getSuite":
    case "getModule":
        testrail.getSuite(/*SUITE_ID=*/ args.trSuiteId, function (err, response, suite) {
            console.log(suite);
        });
        break;
    case "getSuiteByName":
    case "getModuleByName":
        testrail_lib.getSuiteId_byName(args.trProjectId, args.trSuiteName).then((suiteId) => {
            testrail.getSuite(/*SUITE_ID=*/ suiteId, function (err, response, suite) {
                console.log(suite);
            });
        });
        break;
    case "getUsers":
        testrail.getUsers(/*FILTERS=*/ trFilter, function (err, response, users) {
            console.log(users);
        });
        break;
    case "getUserById":
        testrail.getUser(/*USER_ID=*/ args.trUserId, function (err, response, user) {
            console.log(user);
        });
        break;
    case "getUserByEmail":
        testrail.getUserByEmail(/*EMAIL=*/ args.trUserEmail, function (err, response, user) {
            console.log(user);
        });
        break;
    case "addSuite":
    case "addModule":
        testrail_lib.addSuite_byName(args.trProjectId, args.trSuiteName).then((addedSuite) => {
            console.log(addedSuite);
        });
        break;
    case "getTests":
        testrail.getTests(/*RUN_ID=*/ args.trRunId, /*FILTERS=*/ {}, function (err, response, tests) {
            console.log("to be automated   : " + tests.filter((f) => f.custom_automation == 1).length);
            console.log("automated         : " + tests.filter((f) => f.custom_automation == 2).length);
            console.log("will not automate : " + tests.filter((f) => f.custom_automation == 4).length);
            console.log(tests.length);
        });
        break;
    case "getTest":
        testrail.getTest(/*TEST_ID=*/ args.trTestId, function (err, response, test) {
            console.log(test);
        });
        break;
    case "addSection":
    case "addFeature":
        if (!args.trProjectId) {
            console.log("trProjectId is required");
            break;
        }
        if (!args.trSuiteName) {
            console.log("trSuiteName is required");
            break;
        }
        testrail_lib.addSection_byName(args.trProjectId, args.trSuiteName, args.trSuiteName).then((mySection) => {
            console.log(mySection.name);
        });
        break;

    default:
        console.error('Unknown command "' + args.trCmd + '" provided to trCmd parameter. ');
        break;
}
